function output = listMLE(dataset)
NDCGTR = zeros(5, 10); % ??????????????train??NDCG
NDCGVA = zeros(5, 10); % ??????????????vali??NDCG
NDCGTE = zeros(5, 10); % ??????????????test??NDCG
outfile = 'out.txt';   % NDCG????????????
T = 500;               % ????????
times = 1;             % ??????????????????????w
rate = 0.01;           % ????

% ????????????????????
for fold = 1 : 1
    dname = [dataset '/Fold' num2str(fold) ];    % train????????
    [X, Y] = read_letor([dname '/trainingset.txt']);      % ????????
    w = zeros(length(X(1, :)), 1);                  % ??????w??????0
    param = zeros(length(w), T / times);            % ??????T/times????w
    in = 1;                                         % param??????index
    
    % ????T??
    for loop = 1 : T
        cnt = 0;                                    % X??????index
        delta = zeros(1, length(w));                % ????
        for i = 1 : length(Y)
            [~, index] = sort(Y{i}, 'descend');     % ????????????????????Y????????????
            tmpX = zeros(length(Y{i}), length(w));  

            for j = 1 : length(Y{i})
                tmpX(j, :) = X(cnt + index(j), :);  % ??????????????????????????????????Y??????X
            end

            product = tmpX * w;                     % ????
            totalexp = zeros(1, 3);                 % ????????exp????????
            tmpexp = exp(product);
            totalexp(1) = sum(tmpexp);              %1,2,3????????top3????????????exp????
            totalexp(2) = totalexp(1) - exp(product(1));
            totalexp(3) = totalexp(2) - exp(product(2));

            result = zeros(1, 3);
            tmpresult = tmpexp' * tmpX;   % ????????????exp??X??????

            % ????????w??????????????
            for inx = 1 : length(w)
                result(1) = tmpresult(inx);
                result(2) = result(1) - exp(product(1)) * tmpX(1, inx);
                result(3) = result(2) - exp(product(2)) * tmpX(2, inx);

                tmpx = [tmpX(1, inx), tmpX(2, inx), tmpX(3, inx)];
                delta(inx) = delta(inx) + sum(result / totalexp - tmpx);
            end
            cnt = cnt + length(Y{i});
        end

        w = w - delta' .* rate;     % ????w
        if (mod(loop, times) == 0)  % ??????????????????????????????????w
            param(:, in) = w;
            in = in + 1;
        end
    end

    % ??????vali????NDCG????????????w
    [Xt,Yt] = read_letor([dname '/validationset.txt']);
    nd = zeros(T / times, 10);  % ????????????????????NDCG
    % ????????????????
    for i = 1 : T / times
        NDCG = zeros(1, 10);
        cnt = 0;
        % ??????????????
        for j = 1 : length(Yt)
            tmpX = Xt(cnt + 1 : cnt + length(Yt{j}), :);    % ????????X
            YY = tmpX * param(:, i);                        % ??????????????X??????

            % ??????????????????????????????????????
            % ??????????????????10????????
            if (length(Yt{j}) < 10)
                size = length(Yt{j});
            else
                size = 10;
            end
            
            [Ys, ~] = sort(Yt{j}, 'descend');   % ??????????????????????????
            [~, index] = sort(YY, 'descend');   % ????????????????????????????????
            
            YYt = zeros(1, size);
            % ??????????????????????size??????????????????Y??
            for k = 1 : size
                YYt(k) = Yt{j}(index(k));
            end

            NDCG = NDCG + calNDCG(Ys, YYt, size);   % ??????????????NDCG
            cnt = cnt + length(Yt{j});              % ????index
        end

        NDCG = NDCG ./ length(Yt);  % ??????
        nd(i, :) = NDCG;            % ??????????????NDCG??????
    end

    % ??????????????NDCG????????????????????NDCG??????w????????????
    avg = sum(nd, 2);
    [~, tin] = max(avg);
    w = param(:, tin);
    output=w;
    NDCGVA(fold, :) = nd(tin, :);   % ????w??????????????????
    
    % ????????w??????test????NDCG
    [Xt,Yt] = read_letor([dname '/testset.txt']);
    %name = [dname 'sorce.txt'];
    %out = Xt * w;
    %save(name, 'out', '-ascii');
    %system(['perl Eval-Score-3.0.pl ' dname '/test.txt ' name ' ' dname '/ndcg.txt 0']);
    cnt = 0;
    NDCG = zeros(1, 10);
    for i = 1 : length(Yt)
        tmpX = Xt(cnt + 1 : cnt + length(Yt{i}), :);
        YY = tmpX * w;

        [Ys, ~] = sort(Yt{i}, 'descend');
        [~, index] = sort(YY, 'descend');
        if (length(Yt{i}) < 10)
            size = length(Yt{i});
        else
            size = 10;
        end
        YYt = zeros(1, size);
        for j = 1 : size
            YYt(j) = Yt{i}(index(j));
        end

        NDCG = NDCG + calNDCG(Ys, YYt, size);
        cnt = cnt + length(Yt{i});
    end

    NDCG = NDCG ./ length(Yt);
    NDCGTE(fold, :) = NDCG;
    
    % ??????train????NDCG
    cnt = 0;
    NDCG = zeros(1, 10);
    for i = 1 : length(Y)
        tmpX = X(cnt + 1 : cnt + length(Y{i}), :);
        YY = tmpX * w;

        [Ys, ~] = sort(Y{i}, 'descend');
        [~, index] = sort(YY, 'descend');
        if (length(Y{i}) < 10)
            size = length(Y{i});
        else
            size = 10;
        end
        YYt = zeros(1, size);
        for j = 1 : size
            YYt(j) = Y{i}(index(j));
        end

        NDCG = NDCG + calNDCG(Ys, YYt, size);
        cnt = cnt + length(Y{i});
    end

    NDCG = NDCG ./ length(Y);
    NDCGTR(fold, :) = NDCG;
end

% ??????????????
NDCGALL = {NDCGTE, NDCGVA, NDCGTR}; 
f = fopen(outfile, 'w');
for i = 1 : 3
    if (i == 1)
        fname = 'testing';
    elseif (i == 2)
        fname = 'validation';
    else
        fname = 'training';
    end
    fprintf(f, 'Performance on %s set\r\n', fname);
    fprintf(f, 'Folds	NDCG@1	NDCG@2	NDCG@3	NDCG@4	NDCG@5	NDCG@6	NDCG@7	NDCG@8	NDCG@9	NDCG@10\r\n');
    for j = 1 : 5
        fprintf(f, 'Fold%d   ', j);
        for k = 1 : 10
            fprintf(f, '%.4f  ', NDCGALL{i}(j, k));
        end
        fprintf(f, '\r\n');
    end
    fprintf(f, 'aver    ');
    avg = sum(NDCGALL{i}, 1);
    for j = 1 : 10
        fprintf(f, '%.4f  ', avg(j) / 5);
    end
    fprintf(f, '\r\n');
    fprintf(f, '\r\n');
end
fclose(f);

function [X, Y] = read_letor(filename)
    f = fopen(filename);
    display(filename)
    X = zeros(2e5, 0);
    qid = '';
    i = 0;
    q = 0;

    while 1 
        display(f)
        l = fgetl(f);
        if ~ischar(l)
            break;
        end

        i = i + 1;
        [lab,  ~, ~, ind] = sscanf(l, '%d qid:', 1); 
        l(1:ind-1) = [];	
        [nqid, ~, ~, ind] = sscanf(l, '%s', 1); 
        l(1:ind-1 )= []; 

        if ~strcmp(nqid, qid)
            q = q + 1;
            qid = nqid;
            Y{q} = lab;
        else
            Y{q} = [Y{q}; lab];
        end

        tmp = sscanf(l, '%d:%f'); 
        X(i, tmp(1 : 2 : end)) = tmp(2 : 2 : end);
    end
    
    X = X(1 : i, :);
    fclose(f);
	


        
        
        
        
        
        
        
        
        
        
        
        
        